import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_input_value,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import Editor from "./Editor.svelte.js";
import Loader from "./Loader.svelte.js";
import * as lox from "./lox.js";
import { debounce } from "../_snowpack/pkg/lodash.js";
import { onMount } from "../_snowpack/pkg/svelte.js";

function create_else_block(ctx) {
	let div;
	let loader;
	let current;
	loader = new Loader({});

	return {
		c() {
			div = element("div");
			create_component(loader.$$.fragment);
			attr(div, "class", "window-center svelte-1omcwly");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(loader, div, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(loader);
		}
	};
}

// (41:0) {#if ready}
function create_if_block(ctx) {
	let div0;
	let button0;
	let t1;
	let button1;
	let t2;
	let t3;
	let button2;
	let t4;
	let button2_hidden_value;
	let t5;
	let div2;
	let div1;
	let editor_1;
	let t6;
	let textarea0;
	let textarea0_hidden_value;
	let t7;
	let textarea1;
	let current;
	let mounted;
	let dispose;
	let editor_1_props = {};
	editor_1 = new Editor({ props: editor_1_props });
	/*editor_1_binding*/ ctx[8](editor_1);

	return {
		c() {
			div0 = element("div");
			button0 = element("button");
			button0.textContent = "Run";
			t1 = space();
			button1 = element("button");
			t2 = text("Show Disassembly");
			t3 = space();
			button2 = element("button");
			t4 = text("Hide Disassembly");
			t5 = space();
			div2 = element("div");
			div1 = element("div");
			create_component(editor_1.$$.fragment);
			t6 = space();
			textarea0 = element("textarea");
			t7 = space();
			textarea1 = element("textarea");
			button1.hidden = /*disassemblyShown*/ ctx[3];
			button2.hidden = button2_hidden_value = !/*disassemblyShown*/ ctx[3];
			attr(div0, "class", "toolbar");
			attr(div1, "class", "code svelte-1omcwly");
			toggle_class(div1, "full", !/*disassemblyShown*/ ctx[3]);
			attr(textarea0, "class", "disassembly svelte-1omcwly");
			textarea0.hidden = textarea0_hidden_value = !/*disassemblyShown*/ ctx[3];
			textarea0.disabled = true;
			attr(div2, "class", "code-container svelte-1omcwly");
			attr(textarea1, "class", "console svelte-1omcwly");
			textarea1.disabled = true;
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, button0);
			append(div0, t1);
			append(div0, button1);
			append(button1, t2);
			append(div0, t3);
			append(div0, button2);
			append(button2, t4);
			insert(target, t5, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			mount_component(editor_1, div1, null);
			append(div2, t6);
			append(div2, textarea0);
			set_input_value(textarea0, /*disassembly*/ ctx[2]);
			insert(target, t7, anchor);
			insert(target, textarea1, anchor);
			set_input_value(textarea1, /*output*/ ctx[4]);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*run*/ ctx[5]),
					listen(button1, "click", /*showDisassembly*/ ctx[6]),
					listen(button2, "click", /*hideDisassembly*/ ctx[7]),
					listen(textarea0, "input", /*textarea0_input_handler*/ ctx[9]),
					listen(textarea1, "input", /*textarea1_input_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*disassemblyShown*/ 8) {
				button1.hidden = /*disassemblyShown*/ ctx[3];
			}

			if (!current || dirty & /*disassemblyShown*/ 8 && button2_hidden_value !== (button2_hidden_value = !/*disassemblyShown*/ ctx[3])) {
				button2.hidden = button2_hidden_value;
			}

			const editor_1_changes = {};
			editor_1.$set(editor_1_changes);

			if (dirty & /*disassemblyShown*/ 8) {
				toggle_class(div1, "full", !/*disassemblyShown*/ ctx[3]);
			}

			if (!current || dirty & /*disassemblyShown*/ 8 && textarea0_hidden_value !== (textarea0_hidden_value = !/*disassemblyShown*/ ctx[3])) {
				textarea0.hidden = textarea0_hidden_value;
			}

			if (dirty & /*disassembly*/ 4) {
				set_input_value(textarea0, /*disassembly*/ ctx[2]);
			}

			if (dirty & /*output*/ 16) {
				set_input_value(textarea1, /*output*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(editor_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(editor_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t5);
			if (detaching) detach(div2);
			/*editor_1_binding*/ ctx[8](null);
			destroy_component(editor_1);
			if (detaching) detach(t7);
			if (detaching) detach(textarea1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*ready*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let editor;
	let editorResize = debounce(() => editor.resize(), 150);
	let ready = false;
	let disassembly = "";
	let disassemblyShown = false;
	let output = "";

	onMount(() => {
		lox.init().then(() => $$invalidate(1, ready = true));
		let interval = setInterval(updateDisassembly, 250);
		window.addEventListener("resize", editorResize);

		return () => {
			clearInterval(interval);
			window.removeEventListener("resize", editorResize);
		};
	});

	function run() {
		if (!ready) return;
		$$invalidate(4, output = lox.interpret(editor.getValue()));
	}

	function updateDisassembly() {
		if (ready && disassemblyShown) {
			$$invalidate(2, disassembly = lox.disassemble(editor.getValue()));
		}
	}

	function showDisassembly() {
		$$invalidate(3, disassemblyShown = true);
		setTimeout(editorResize, 0);
	}

	function hideDisassembly() {
		$$invalidate(3, disassemblyShown = false);
		setTimeout(editorResize, 0);
	}

	function editor_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			editor = $$value;
			$$invalidate(0, editor);
		});
	}

	function textarea0_input_handler() {
		disassembly = this.value;
		$$invalidate(2, disassembly);
	}

	function textarea1_input_handler() {
		output = this.value;
		$$invalidate(4, output);
	}

	return [
		editor,
		ready,
		disassembly,
		disassemblyShown,
		output,
		run,
		showDisassembly,
		hideDisassembly,
		editor_1_binding,
		textarea0_input_handler,
		textarea1_input_handler
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;