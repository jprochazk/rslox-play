export const sources = {
  variables: [
    "// Lox is dynamically typed, so you may assign",
    "// anything to a variable at any time",
    "var a = 10;",
    "print a;",
    'a = "test";',
    "print a;"
  ].join("\n"),
  expressions: [
    "// Lox supports the basic set of arithmetic operators",
    "var a = 10 * 10 + 4 / 2 - 1;",
    "print a;",
    "// At the moment, modulo (%) and exponentiation (**)",
    "// is not supported."
  ].join("\n"),
  statements: [
    "var a = 10 * 10 + 5;",
    "print a;"
  ].join("\n"),
  "control flow": [
    "// Lox supports C-style control flow:",
    "// if statements",
    "var a = 10;",
    "if (a != nil) { print a; }",
    "// while loops",
    "while (a >= 0) {",
    "    print a;",
    "    a = a - 1;",
    "}",
    "// for loops",
    "// add-assignment (+=) and friends are not supported",
    "// which is why the increment looks strange",
    "for (var i = 0; i < 10; i = i + 1) {",
    "    print i;",
    "}",
    "// note: break/continue statements are not currently implemented",
    "// as they are not part of the official Lox implementation"
  ].join("\n"),
  functions: [
    "fun test(value) { print value; }",
    "test(50);",
    "// Functions are first-class objects in Lox",
    "fun call(what, with) { what(with); }",
    "call(test, 100);",
    "// All functions are closures which",
    "// capture values from outer scopes:",
    "fun makeCounter(start, step) {",
    "    fun counter() {",
    "        start = start + step;",
    "        return start - step;",
    "    }",
    "    return counter;",
    "}",
    "var c = makeCounter(10, 5);",
    "print c(); // 10",
    "print c(); // 15"
  ].join("\n"),
  classes: [
    "// Lox does not support object literals,",
    "// but every class can have fields added",
    "// to it as needed",
    "class Object {}",
    "var obj = Object();",
    "obj.field = 10;",
    "print obj.field;"
  ].join("\n"),
  "class constructors": [
    "// As with any object-oriented language,",
    "// objects should preferrably be in some",
    "// valid state right after being created",
    "class Test {",
    "    // Lox calls these 'initializers'",
    "    init(value) {",
    "        this.value = value;",
    "    }",
    "}",
    "var test = Test(100);",
    "print test.value;",
    "// the initializer is just a function",
    "// so you can also call it after the object",
    "// has been created",
    "test.init(50);",
    "print test.value;"
  ].join("\n"),
  "class methods": [
    "// Classes may have methods declared on them",
    "class Rectangle {",
    "    init(width, height) {",
    "        this.width = width;",
    "        this.height = height;",
    "    }",
    "    area() {",
    "        return this.width * this.height;",
    "    }",
    "}",
    "var rect = Rectangle(50, 100);",
    "print rect.area(); // 5000"
  ].join("\n"),
  "class inheritance": [
    "// And of course, classes also support inheritance",
    "class A {",
    "    init(a) {",
    "        this.a = a;",
    "    }",
    "}",
    "",
    "class B < A {",
    "    init(b) {",
    "        super.init(b + 10);",
    "        this.b = b;",
    "    }",
    "}",
    "var b = B(10);",
    "print b.a;",
    "// Fun fact: calling super.init is not enforced.",
    "// Not only that, subclasses don't even need to",
    "// have initializers at all",
    "class C < A { init() {} }",
    "// Of course, this is a footgun, but it's how Lox works!",
    "var c = C(); // no error",
    "// print c.a; // uncomment this line before running"
  ].join("\n")
};
